{{- if and .Info .Info.Title -}}
// {{ .Info.Title }} client
{{- end }}

{{- range $type := .Types }}

export interface {{ $type.GoName }} {
	{{- range $field := .Fields }}
	{{- if $field.Optional }}
	{{ padRight (printf "%s?:" $field.APIName) (add $type.GoNameMaxLen 2) }} {{ $field.TSType }} | null;
	{{- else }}
	{{ padRight (printf "%s:" $field.APIName) (add $type.GoNameMaxLen 2) }} {{ $field.TSType }};
	{{- end }}
	{{- end }}
}
{{- end }}

export class Client {
	private baseURL: URL;

	constructor(baseURL: string) {
		this.baseURL = new URL(baseURL);
	}

	async debugInfo(): Promise<DebugInfo> {
		return this.fetch('_debug');
	}

	private async fetch(path: string): Promise<any> {
		const url = new URL(path, this.baseURL);

		const resp = await fetch(url);
		if (!resp.ok) {
			throw new Error(await resp.json());
		}

		return resp.json();
	}
}

export class Error {
	messages: string[];

	constructor(json: JSONError) {
		this.messages = json.messages;
	}

	toString(): string {
		return this.messages[0];
	}
}
