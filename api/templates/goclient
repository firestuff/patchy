{{- if and .Info .Info.Title -}}
// {{ .Info.Title }} client

{{ end -}}
package {{ if .Form.Has "packageName" -}} {{ .Form.Get "packageName" }} {{- else -}} goclient {{- end }}

import (
	"context"
	"crypto/tls"
	{{- if .URLPrefix }}
	"net/url"
	{{- end }}
	{{- if .UsesTime }}
	"time"
	{{- end }}

	//
	{{- if .UsesCivil }}
	"cloud.google.com/go/civil"
	{{- end }}
	"github.com/firestuff/patchy/patchyc"
)

type (
	Filter     = patchyc.Filter
	GetOpts    = patchyc.GetOpts
	ListOpts   = patchyc.ListOpts
	UpdateOpts = patchyc.UpdateOpts
)

{{- range $type := .Types }}
{{- if $type.SkipInGo }} {{- continue }} {{- end }}

type {{ $type.GoName }} struct {
	{{- range $field := .Fields }}
	{{ padRight $field.GoName $type.GoNameMaxLen }} {{ padRight $field.GoType $type.GoTypeMaxLen }} `json:"{{ $field.APIName }}"`
	{{- end }}
}
{{- end }}

type Client struct {
	patchyClient *patchyc.Client
}

func NewClient(baseURL string) *Client {
	{{- if .URLPrefix }}
	baseURL, err := url.JoinPath(baseURL, "{{ .URLPrefix }}")
	if err != nil {
		panic(err)
	}
	{{- end }}

	return &Client{
		patchyClient: patchyc.NewClient(baseURL),
	}
}

func (c *Client) SetTLSClientConfig(cfg *tls.Config) *Client {
	c.patchyClient.SetTLSClientConfig(cfg)
	return c
}

func (c *Client) SetDebug(debug bool) *Client {
	c.patchyClient.SetDebug(debug)
	return c
}

{{- if .AuthBasic }}

func (c *Client) SetBasicAuth(user, pass string) *Client {
	c.patchyClient.SetBasicAuth(user, pass)
	return c
}
{{- end }}

{{- if .AuthBearer }}

func (c *Client) SetAuthToken(token string) *Client {
	c.patchyClient.SetAuthToken(token)
	return c
}
{{- end }}

{{- range $type := .Types }}
{{- if $type.APIName }}

//// {{ $type.APINameCamel }}

func (c *Client) Create {{- $type.APINameCamel -}}(ctx context.Context, obj * {{- $type.GoName -}} ) (* {{- $type.GoName -}}, error) {
	return CreateName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", obj)
}

func (c *Client) Delete {{- $type.APINameCamel -}}(ctx context.Context, id string, opts *UpdateOpts) error {
	return DeleteName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", id, opts)
}

func (c *Client) Find {{- $type.APINameCamel -}}(ctx context.Context, shortID string) (* {{- $type.GoName -}}, error) {
	return FindName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", shortID)
}

func (c *Client) Get {{- $type.APINameCamel -}}(ctx context.Context, id string, opts *GetOpts) (* {{- $type.GoName -}}, error) {
	return GetName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", id, opts)
}

func (c *Client) List {{- $type.APINameCamel -}}(ctx context.Context, opts *ListOpts) ([]* {{- $type.GoName -}}, error) {
	return ListName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", opts)
}

func (c *Client) Replace {{- $type.APINameCamel -}}(ctx context.Context, id string, obj * {{- $type.GoName -}}, opts *UpdateOpts) (* {{- $type.GoName -}}, error) {
	return ReplaceName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", id, obj, opts)
}

func (c *Client) Update {{- $type.APINameCamel -}}(ctx context.Context, id string, obj * {{- $type.GoName -}}, opts *UpdateOpts) (* {{- $type.GoName -}}, error) {
	return UpdateName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", id, obj, opts)
}

func (c *Client) StreamGet {{- $type.APINameCamel -}}(ctx context.Context, id string, opts *GetOpts) (*patchyc.GetStream[ {{- $type.GoName -}} ], error) {
	return StreamGetName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", id, opts)
}

func (c *Client) StreamList {{- $type.APINameCamel -}}(ctx context.Context, opts *ListOpts) (*patchyc.ListStream[ {{- $type.GoName -}} ], error) {
	return StreamListName[ {{- $type.GoName -}} ](ctx, c, " {{- $type.APIName -}} ", opts)
}
{{- end }}
{{- end }}

//// Generic

func CreateName[T any](ctx context.Context, c *Client, name string, obj *T) (*T, error) {
	return patchyc.CreateName[T](ctx, c.patchyClient, name, obj)
}

func DeleteName[T any](ctx context.Context, c *Client, name, id string, opts *UpdateOpts) error {
	return patchyc.DeleteName[T](ctx, c.patchyClient, name, id, opts)
}

func FindName[T any](ctx context.Context, c *Client, name, shortID string) (*T, error) {
	return patchyc.FindName[T](ctx, c.patchyClient, name, shortID)
}

func GetName[T any](ctx context.Context, c *Client, name, id string, opts *GetOpts) (*T, error) {
	return patchyc.GetName[T](ctx, c.patchyClient, name, id, opts)
}

func ListName[T any](ctx context.Context, c *Client, name string, opts *ListOpts) ([]*T, error) {
	return patchyc.ListName[T](ctx, c.patchyClient, name, opts)
}

func ReplaceName[T any](ctx context.Context, c *Client, name, id string, obj *T, opts *UpdateOpts) (*T, error) {
	return patchyc.ReplaceName[T](ctx, c.patchyClient, name, id, obj, opts)
}

func UpdateName[T any](ctx context.Context, c *Client, name, id string, obj *T, opts *UpdateOpts) (*T, error) {
	return patchyc.UpdateName[T](ctx, c.patchyClient, name, id, obj, opts)
}

func StreamGetName[T any](ctx context.Context, c *Client, name, id string, opts *GetOpts) (*patchyc.GetStream[T], error) {
	return patchyc.StreamGetName[T](ctx, c.patchyClient, name, id, opts)
}

func StreamListName[T any](ctx context.Context, c *Client, name string, opts *ListOpts) (*patchyc.ListStream[T], error) {
	return patchyc.StreamListName[T](ctx, c.patchyClient, name, opts)
}

//// Utility generic

func P[T any](v T) *T {
	return patchyc.P(v)
}
