package {{ if .Form.Has "packageName" -}} {{ .Form.Get "packageName" }} {{- else -}} goclient {{- end }}

import (
    {{- range $package := .Packages }}
    "{{ $package }}"
    {{- end }}

    "context"
    "crypto/tls"
    {{- if .URLPrefix }}
    "net/url"
    {{- end }}

    "github.com/firestuff/patchy/patchyc"
)

type (
    Filter     = patchyc.Filter
    GetOpts    = patchyc.GetOpts
    ListOpts   = patchyc.ListOpts
    UpdateOpts = patchyc.UpdateOpts
)

{{- range $type := .Types }}

type {{ $type.GoName }} struct {
    {{- range $field := .Fields }}
    {{ padRight $field.GoName $type.GoNameMaxLen }} {{ padRight $field.GoType $type.GoTypeMaxLen }} `json:"{{ $field.APIName }}"`
    {{- end }}
}
{{- end }}

type Client struct {
    patchyClient *patchyc.Client
}

func NewClient(baseURL string) *Client {
    {{- if .URLPrefix }}
    baseURL, err := url.JoinPath(baseURL, "{{ .URLPrefix }}")
    if err != nil {
        panic(err)
    }
    {{- end }}

    return &Client{
        patchyClient: patchyc.NewClient(baseURL),
    }
}

func (c *Client) SetTLSClientConfig(cfg *tls.Config) *Client {
    c.patchyClient.SetTLSClientConfig(cfg)
    return c
}

func (c *Client) SetDebug(debug bool) *Client {
    c.patchyClient.SetDebug(debug)
    return c
}

{{- if .AuthBasic }}

func (c *Client) SetBasicAuth(user, pass string) *Client {
    c.patchyClient.SetBasicAuth(user, pass)
    return c
}
{{- end }}

{{- if .AuthBearer }}

func (c *Client) SetAuthToken(token string) *Client {
    c.patchyClient.SetAuthToken(token)
    return c
}
{{- end }}

// TODO: Add APIName-specific methods

func CreateName[T any](ctx context.Context, c *Client, name string, obj *T) (*T, error) {
	return patchyc.CreateName[T](ctx, c.patchyClient, name, obj)
}

func DeleteName[T any](ctx context.Context, c *Client, name, id string, opts *UpdateOpts) error {
	return patchyc.DeleteName[T](ctx, c.patchyClient, name, id, opts)
}

func FindName[T any](ctx context.Context, c *Client, name, shortID string) (*T, error) {
	return patchyc.FindName[T](ctx, c.patchyClient, shortID)
}

func GetName[T any](ctx context.Context, c *Client, name, id string, opts *GetOpts) (*T, error) {
	return patchyc.GetName[T](ctx, c.patchyClient, name, id, opts)
}

func ListName[T any](ctx context.Context, c *Client, name string, opts *ListOpts) ([]*T, error) {
	return patchyc.ListName[T](ctx, c.patchyClient, name, opts)
}

func ReplaceName[T any](ctx context.Context, c *Client, name, id string, obj *T, opts *UpdateOpts) (*T, error) {
	return patchyc.ReplaceName[T](ctx, c.patchyClient, name, id, obj, opts)
}

func UpdateName[T any](ctx context.Context, c *Client, name, id string, obj *T, opts *UpdateOpts) (*T, error) {
	return patchyc.UpdateName[T](ctx, c.patchyClient, name, id, obj, opts)
}

func StreamGetName[T any](ctx context.Context, c *Client, name, id string, opts *GetOpts) (*patchyc.GetStream[T], error) {
	return patchyc.StreamGetName[T](ctx, c.patchyClient, name, id, opts)
}

func StreamListName[T any](ctx context.Context, c *Client, name string, opts *ListOpts) (*patchyc.ListStream[T], error) {
	return patchyc.StreamListName[T](ctx, c.patchyClient, name, opts)
}

func P[T any](v T) *T {
    return patchyc.P(v)
}
